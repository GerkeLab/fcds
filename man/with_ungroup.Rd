% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{with_ungroup}
\alias{with_ungroup}
\title{Apply a Function to a Temporarily Ungrouped Data Frame}
\usage{
with_ungroup(.data, .f, ...)
}
\arguments{
\item{.data}{A grouped tbl, tibble, or data.frame}

\item{.f}{A function, formula, or vector (not necessarily atomic).

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it is
converted to an extractor function. Character vectors index by
name and numeric vectors index by position; use a list to index
by position and name at different levels. If a component is not
present, the value of \code{.default} will be returned.}

\item{...}{Additional arguments passed on to methods.}
}
\description{
Occasionally it is useful to ungroup a data frame before applying a
calculation that would otherwise by slowed down by subdividing the
calculation by group. In these circumstances, the calculation should be
independent of the grouping. \code{with_ungroup()} temporarily removes groups,
applies the function \code{.f} to \code{.data} (as \code{.f(.data)}) and then restores
the original grouping.
}
\examples{
# with_ungroup() applies inner function to ungrouped data frame
# and restores grouping on output
tidyr::table1 \%>\%
  dplyr::group_by(country, year) \%>\%
  with_ungroup(~ dplyr::mutate(., r = cases / population))

# groups that "disappear" are implicitly dropped, with a warning
tidyr::table1 \%>\%
  dplyr::group_by(country, year) \%>\%
  with_ungroup(~ {
    dplyr::mutate(., r = cases/population) \%>\%
      dplyr::select(-year)
  })

# works like "normal" if no groupings are present
tidyr::table1 \%>\%
  with_ungroup(~ dplyr::mutate(., r = cases/population))

}
\seealso{
Other Group Utilities: \code{\link{group_drop}},
  \code{\link{with_retain_groups}}
}
\concept{Group Utilities}
