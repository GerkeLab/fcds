% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{with_retain_groups}
\alias{with_retain_groups}
\title{Restore Groups After Applying a Function to a Data Frame}
\usage{
with_retain_groups(.data, .f, ...)
}
\arguments{
\item{.data}{A grouped tbl, tibble, or data.frame}

\item{.f}{A function, formula, or vector (not necessarily atomic).

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it is
converted to an extractor function. Character vectors index by
name and numeric vectors index by position; use a list to index
by position and name at different levels. If a component is not
present, the value of \code{.default} will be returned.}

\item{...}{Additional arguments passed on to methods.}
}
\description{
Groups are sometimes removed by \link{dplyr} functions, such as
\code{\link[dplyr:summarize]{dplyr::summarize()}}. However, it may be necessary to ensure that the data
output by a function retains as many of the original groups as are available
after applying the function. \code{with_retain_groups()} applies a function to a
grouped data frame and restores the original group as much as possible.
}
\examples{
# with_retain_groups() applies inner function to grouped data frame
# and restores grouping on output
tidyr::table1 \%>\%
  dplyr::group_by(country, year) \%>\%
  with_retain_groups(~ dplyr::summarize(., cases = sum(cases)))

# Groups that "disappear" are implicitly dropped, with a warning
tidyr::table1 \%>\%
  dplyr::group_by(country, year) \%>\%
  with_retain_groups(~ {
    dplyr::summarize(., r = cases / population) \%>\%
      dplyr::summarize(r = mean(r))
  })

# Works like "normal" if no groupings are present
tidyr::table1 \%>\%
  with_retain_groups(~ dplyr::mutate(., r = cases / population))

}
\seealso{
Other Group Utilities: \code{\link{group_drop}},
  \code{\link{with_ungroup}}
}
\concept{Group Utilities}
