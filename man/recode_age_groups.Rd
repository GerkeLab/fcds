% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/age.R
\name{recode_age_groups}
\alias{recode_age_groups}
\title{Recode Age Groups}
\usage{
recode_age_groups(data, breaks, age_group = age_group)
}
\arguments{
\item{data}{A data frame, containin age group labels in the \code{age_group}
column.}

\item{breaks}{The breaks at which the lower bounds of age groups should be
defined. If the first and last elements are \code{NA}, the lower bound is
learned from the age groups present in the data. (Both, one, or none can be
\code{NA}). If the first element is not missing, the lowest group will be ages 0
to \code{min(breaks) - 1}. If the last element is not missing, the highest group
will be \code{max(breaks)} and above. Missing values within the breaks other
than the first and last elements are ignored. The order of the breaks is
not important beyond the presence of missing values at the extremes.}

\item{age_group}{Unquoted column name containing the age grouping.}
}
\description{
This function helps to recode age groups into new groups that are equal to or
overlap the original age grouping.
}
\examples{
d_age_groups <- dplyr::tibble(
  age_min = seq(0, 25, 5),
  age_max = seq(4, 29, 5)
) \%>\%
  format_age_groups()

d_age_groups

recode_age_groups(d_age_groups, breaks = c(10, 20, 25))

# Use maximum age in data for upper bound of highest group
recode_age_groups(d_age_groups, breaks = c(10, 20, 25, NA))

# Use minimum age in data for lower bound of lowest group
d_age_groups \%>\%
  dplyr::filter(age_min >= 5) \%>\%
  recode_age_groups(breaks = c(NA, 10, 20, 25))

# Dichotomize
recode_age_groups(d_age_groups, breaks = 20)

d_age_groups \%>\%
  dplyr::filter(age_min >= 5) \%>\%
  recode_age_groups(breaks = c(NA, 20, NA))

}
\seealso{
Other age processors: \code{\link{complete_age_groups}},
  \code{\link{filter_age_groups}},
  \code{\link{format_age_groups}},
  \code{\link{separate_age_groups}},
  \code{\link{standardize_age_groups}}
}
\concept{age processors}
